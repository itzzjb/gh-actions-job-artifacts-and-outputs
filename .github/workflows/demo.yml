name: Artifacts Demo
run-name: Artifacts Demo
on:
  push:
    branches:
      - main
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Install dependencies
        run: npm ci
      - name: Lint code
        run: npm run lint
      - name: Test code
        run: npm run test
  build:
    needs: test
    outputs:
      # Create an output variable to store the name of the js file
      # We can give a preferred name to the output variable
      # Here we are setting the overall output to the job
      # We need to add a expression to get the value of the output variable
      # Here we are accessing the steps context value, then the step id publish-js-file, then the outputs context, then the script-file output variable
      script-file: ${{ steps.publish-js-file.outputs.script-file }}
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Install dependencies
        run: npm ci
      - name: Build website
        # When we build the website, we generate the static files in the dist folder
        # These files are the files that we will deploy to the server
        # We need access to these files after the job is done, so we need to save them as artifacts
        # Otherwise, they will be lost when the job finishes (runner machine is destroyed after the job finishes)
        # We can inspect and test them locally or upload them to a web server
        # Also, we can download them in another job or workflow such as the deploy job
        run: npm run build
      # We are trying to get the name of the js file in the dist folder as a output
      - name: Publish JS file name
        # We need to give a uniqe id to the step , so we can access from steps context
        id: publish-js-file
        # The linux command to get the js file name is -> find dist/assets/*.js -type f -execdir echo '{}' ';'
        # We need make some changes to save the file name as an output variable
        # Here we get the echoed file name and save it as an script-file output variable
        # Then we save that variable to a file , which the file path is stored in the GITHUB_OUTPUT environment variable
        # This will set the overall output to the step
        run: find dist/assets/*.js -type f -execdir echo 'script-file={}' >> $GITHUB_OUTPUT ';'
      # We can store these produced files as artifacts using the actions/upload-artifact action in a new step
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          # First we need to specify the name of the artifact
          # We need that name to retrieve (download) the artifact in another job or workflow
          name: dist-files
          # Then we need to specify the path to the files that we want to store as artifacts
          # In this case, we want to store the files in the dist folder as artifacts
          path: dist
          # We can also specify multiple paths as well (Then we need to use the | character)
          # path: |
          #   dist
          #   package.json
          # We can also store the package.json file as an artifact. This is included just for demonstration purposes
  deploy:
    # needs is a must here because we need to download the artifacts which were uploaded in the build job
    needs: build
    runs-on: ubuntu-latest
    steps:
      # We can download the artifacts using the actions/download-artifact action in a new step
      # Then use the files in the deploy job
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          # We need to specify the name of the artifact that we want to download
          # This will download the artificats and unzip them in the current directory
          # Note that we will loose the dist-files folders, all the files inside the dist-folder will be directly added to the current directory
          name: dist-files
      - name: Output Contents
        # We can output the contents of the current directory to see the files that we downloaded
        run: ls
      - name: Deploy
        # Here we can use different actions provided bn cloud providers or other third-party services to deploy the files
        # For demonstration purposes, we will just print a message
        run: echo "Deploying..."
